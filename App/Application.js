// Generated by Pablo Sergio Alvarado Gutierrez
/**
 * DeftJS Application class for the sglm application.
 */

Ext.define("sglm.Application", {
  extend: "Deft.mvc.Application",
  requires: [
    "sglm.config.AppConfig",
    "sglm.view.Viewport",
    "sglm.view.login.Login",
    "sglm.service.LoginService",
    "sglm.service.JwtService",
    "sglm.service.NotificationService",
    "sglm.service.LocalStorageService",
    "sglm.service.MenuService",
    "sglm.store.menu.MenuStore",
    "sglm.service.ObjetoEnsayoMedidorService",
    "sglm.store.objetoEnsayo.MedidorStore",
    "sglm.service.ListaItemService",
    "sglm.store.lista.ItemStore",
    "sglm.service.ObjetoEnsayoHidroelevadorAisladoService",
    "sglm.store.objetoEnsayo.HidroelevadorAisladoStore",
    "sglm.service.ObjetoEnsayoGuanteMangaGomaService",
    "sglm.store.objetoEnsayo.GuanteMangaGomaStore",
    "sglm.service.ObjetoEnsayoTransformadorCorrienteService",
    "sglm.store.objetoEnsayo.TransformadorCorrienteStore",
    "sglm.service.ObjetoEnsayoEquipoMedidaService",
    "sglm.store.objetoEnsayo.EquipoMedidaStore",
    "sglm.service.ObjetoEnsayoPatronTrabajoService",
    "sglm.store.objetoEnsayo.PatronTrabajoStore",
    "sglm.service.TipoProgramacionService",
    "sglm.store.tipoProgramacion.TipoProgramacionStore",
    "sglm.store.estacionTrabajo.EstacionTrabajoStore",
    "sglm.service.EstacionTrabajoService",
    "sglm.service.PlantillaProgramMedidorService",
    "sglm.store.plantillaProgramMedidor.PlantillaProgramMedidorStore",
    "sglm.service.ServiciosService",
    "sglm.store.servicios.ServiciosStore",
    "sglm.store.ordenTrabajo.OrdenTrabajoStore",
    "sglm.service.OrdenTrabajoService",
    "sglm.store.solicitud.SolicitudStore",
    "sglm.service.SolicitudService",
    "sglm.store.objetoEnsayo.ObjetoEnsayoStore",
    "sglm.store.estacionTrabajo.EstacionTrabajoRelacionUsrStore",
    "sglm.store.estacionTrabajo.EstacionTrabajoUsuariosStore",
    "sglm.service.ReporteService",
    "sglm.store.servicios.ProductosStore",
    "sglm.store.historico.HistoricoStore",
    "overrides.rownumberer.RowNumberer",
    "sglm.store.estacionTrabajo.CaracteristicasStore",
    "overrides.numberfield.NumberField",
    "sglm.service.CondicionesAccionesService",
    "sglm.store.condicionesAcciones.CondicionesAccionesStore",
    "sglm.store.condicionesAcciones.CatalogoCaracteristicasStore",
    "sglm.store.dashboardEstacionTrabajo.CorrientesEnsayoStore",
    "sglm.store.solicitud.SolicitudNuevoStore",
    "sglm.store.solicitud.ControlSolicitudNuevoStore",
    "sglm.store.solicitud.CtrlHistMedNuevosStore"
  ],
  /**
  	* init() runs when Ext.onReady() is called.
  */

    init: function() {
        this.beforeInit();
        Deft.Injector.configure(this.buildInjectorConfiguration());
        Deft.promise.Deferred.enableLogging = false;
        return this.launch();
    },
    /**
     * @protected
     * Returns the configuration object to pass to Deft.Injector.configure(). Override in subclasses to alter the Injector configuration before returning the config object.
     * @return {Object} The Injector configuration object.
     */

  buildInjectorConfiguration: function() {
    var config;
    config = {
      appConfig: {
        className: "sglm.config.AppConfig",
        parameters: [
          {
            environment: sglm.config.AppConfig.DEVELOPMENT_ENV
          }
        ]
      },
       /*AbstractContext*/
      abstractContext: "sglm.context.AbstractContext",
      /*ObjetoEnsayoContext*/
      objetoEnsayoContext: "sglm.context.ObjetoEnsayoContext",
      /* CodigoBarraContext*/
      codigoBarraContext: "sglm.context.CodigoBarraContext",
      /* Menu */
      menuContext: "sglm.context.MenuContext",
      menuService: "sglm.service.MenuService",
      menuStore: "sglm.store.menu.MenuStore",
      /* Medidores */
      objetoEnsayoMedidorContext: "sglm.context.ObjetoEnsayoMedidorContext",
      objetoEnsayoMedidorService: "sglm.service.ObjetoEnsayoMedidorService",
      objetoEnsayoMedidorStore: "sglm.store.objetoEnsayo.MedidorStore",
      /* Transformador Corriente */
      objetoEnsayoTransformadorCorrienteContext: "sglm.context.ObjetoEnsayoTransformadorCorrienteContext",
      objetoEnsayoTransformadorCorrienteService: "sglm.service.ObjetoEnsayoTransformadorCorrienteService",
      objetoEnsayoTransformadorCorrienteStore: "sglm.store.objetoEnsayo.TransformadorCorrienteStore",
      /* Equipo Medida */
      objetoEnsayoEquipoMedidaContext: "sglm.context.ObjetoEnsayoEquipoMedidaContext",
      objetoEnsayoEquipoMedidaService: "sglm.service.ObjetoEnsayoEquipoMedidaService",
      objetoEnsayoEquipoMedidaStore: "sglm.store.objetoEnsayo.EquipoMedidaStore",
      /* Patron de Trabajo */
      objetoEnsayoPatronTrabajoContext: "sglm.context.ObjetoEnsayoPatronTrabajoContext",
      objetoEnsayoPatronTrabajoService: "sglm.service.ObjetoEnsayoPatronTrabajoService",
      objetoEnsayoPatronTrabajoStore: "sglm.store.objetoEnsayo.PatronTrabajoStore",
     //HIDROELEVADOR AISLADO
      objetoEnsayoHidroelevadorAisladoContext: "sglm.context.ObjetoEnsayoHidroelevadorAisladoContext",
      objetoEnsayoHidroelevadorAisladoService: "sglm.service.ObjetoEnsayoHidroelevadorAisladoService",
      objetoEnsayoHidroelevadorAisladoStore: "sglm.store.objetoEnsayo.HidroelevadorAisladoStore",
      //GUANTE/MANGA GOMA
      objetoEnsayoGuanteMangaGomaContext: "sglm.context.ObjetoEnsayoGuanteMangaGomaContext",
      objetoEnsayoGuanteMangaGomaService: "sglm.service.ObjetoEnsayoGuanteMangaGomaService",
      objetoEnsayoGuanteMangaGomaStore: "sglm.store.objetoEnsayo.GuanteMangaGomaStore",
      //TIPO DE PROGRAMACION
      tipoProgramacionContext: "sglm.context.TipoProgramacionContext",
      tipoProgramacionService: "sglm.service.TipoProgramacionService",
      tipoProgramacionStore: "sglm.store.tipoProgramacion.TipoProgramacionStore",
      /* Estacion Trabajo*/
      estacionTrabajoContext: "sglm.context.EstacionTrabajoContext",
      estacionTrabajoService: "sglm.service.EstacionTrabajoService",
      estacionTrabajoStore: "sglm.store.estacionTrabajo.EstacionTrabajoStore",
      //PLANTILLA PROGRAMACION MEDIDOR
      plantillaProgramMedidorContext: "sglm.context.PlantillaProgramMedidorContext",
      plantillaProgramMedidorService: "sglm.service.PlantillaProgramMedidorService",
      plantillaProgramMedidorStore: "sglm.store.plantillaProgramMedidor.PlantillaProgramMedidorStore",
      paramsPlantillaProgramMedidorStore: "sglm.store.plantillaProgramMedidor.PlantillaProgramMedidorParamsStore",
       //SERVICIOS
      serviciosContext: "sglm.context.ServiciosContext",
      serviciosService: "sglm.service.ServiciosService",
      serviciosStore: "sglm.store.servicios.ServiciosStore",
      estacionTrabajoServiciosStore: "sglm.store.estacionTrabajo.EstacionTrabajoServiciosStore",
      estacionTrabajoUsuariosStore: "sglm.store.estacionTrabajo.EstacionTrabajoUsuariosStore",
      estacionTrabajoRelacionUsrStore: "sglm.store.estacionTrabajo.EstacionTrabajoRelacionUsrStore",
      caracteristicasStore:"sglm.store.estacionTrabajo.CaracteristicasStore",
      productosStore:"sglm.store.servicios.ProductosStore",
      iconoStore: "sglm.store.servicios.IconoStore",
      /* Login */
      loginService: "sglm.service.LoginService",
      /* Token */
      jwtService: "sglm.service.JwtService",
      /* Notificaciones */
      notificationService: "sglm.service.NotificationService",
      /* Local Storage */
      localStorageService: "sglm.service.LocalStorageService",
      //LISTAS
      listaItemStore: "sglm.store.lista.ItemStore",
      listaItemService: "sglm.service.ListaItemService",
      /* Lista para Medidores */
      listaMarcaMedidor: "sglm.store.lista.ItemStore",
      listaTipoMedidor: "sglm.store.lista.ItemStore",
      listaTensionNominal: "sglm.store.lista.ItemStore",
      listaCorrienteNominal: "sglm.store.lista.ItemStore",
      listaCorrienteMaxima: "sglm.store.lista.ItemStore",
      listaFrecuencia: "sglm.store.lista.ItemStore",
      listaNumeroElementos: "sglm.store.lista.ItemStore",
      listaNumeroHilos: "sglm.store.lista.ItemStore",
      listaTipoSuministro: "sglm.store.lista.ItemStore",
      listaClaseEnergiaActiva: "sglm.store.lista.ItemStore",
      listaClaseEnergiaReactiva: "sglm.store.lista.ItemStore",
      listaDemandimetro: "sglm.store.lista.ItemStore",
      listaConstanteMedidor: "sglm.store.lista.ItemStore",
      listaUnidadConstanteMedidor: "sglm.store.lista.ItemStore",
      /* Store datos medidores ERP*/
      tipoMedidorStore: "sglm.store.objetoEnsayo.TipoMedidorStore",
      fabricaMedidorStore: "sglm.store.objetoEnsayo.FabricaMedidorStore",
      modeloMedidorStore: "sglm.store.objetoEnsayo.ModeloMedidorStore",

      /* Lista para Transformadores de Corriente */
      listaMarcaTransformador: "sglm.store.lista.ItemStore",
      listaTensionNominalTransformador: "sglm.store.lista.ItemStore",
      listaTensionNominalSecundariaTransformador:  "sglm.store.lista.ItemStore",
      listaClaseTransformador:"sglm.store.lista.ItemStore",
      listaPotenciaTransformador: "sglm.store.lista.ItemStore",
      listaUnidadPotenciaTransformador: "sglm.store.lista.ItemStore",
      listaFrecuenciaTransformador: "sglm.store.lista.ItemStore",
      listaEsquemaTransformador: "sglm.store.lista.ItemStore",
      listaCorrienteMaximaTransformador: "sglm.store.lista.ItemStore",
      /* Lista para Equipos de Medida */ 
      listaTipoEquipoMedida: "sglm.store.lista.ItemStore",
      listaMarcaEquipoMedida: "sglm.store.lista.ItemStore",
      listaFrecuenciaEquipoMedida: "sglm.store.lista.ItemStore",
      listaNivelTension: "sglm.store.lista.ItemStore",
      listaTipoPinzas: "sglm.store.lista.ItemStore",
      /* Lista Patron de Trabajo */
      listaMarcaPatronTrabajo: "sglm.store.lista.ItemStore",
      listaClasePatronTrabajo:"sglm.store.lista.ItemStore",
      //Lista para Hidroelevador aislado
      listaMarcaHidroelevador: "sglm.store.lista.ItemStore",
      listaTensionNominalKV: "sglm.store.lista.ItemStore",
      listaCategoriaHE: "sglm.store.lista.ItemStore",
      //Lista para Guante/Mangas de goma
      listaMarcaGoma:"sglm.store.lista.ItemStore",
      listaElementoGoma:"sglm.store.lista.ItemStore",
      listaClaseGoma: "sglm.store.lista.ItemStore",
      listaTipoGoma:"sglm.store.lista.ItemStore",
      listaTalla:"sglm.store.lista.ItemStore",
      //Lista de plantilla de Programaci�n de Medidores
      listaDescParametro:"sglm.store.lista.ItemStore",
      //LISTAS GENERALES PARA EL PROYECTO
      listaSiNo: "sglm.store.lista.ItemStore",
      listaEstado: "sglm.store.lista.ItemStore",
      /* Lista Estacion Trabajo */
      listaTipoEstacionTrabajo: "sglm.store.lista.ItemStore",
      /* Lista Tipos Objeto Ensayo*/
      listaTipoObjetoEnsayo: "sglm.store.lista.ItemStore",  
      /* Lista Precintos */
      listaPrecintos: "sglm.store.lista.ItemStore",
      //lista de caracteraticas del medidor
      listaCaracteristicasMed:"sglm.store.lista.ItemStore",
      /* Orden Trabajo */
      ordenTrabajoContext: "sglm.context.OrdenTrabajoContext",
      ordenTrabajoStore: "sglm.store.ordenTrabajo.OrdenTrabajoStore",
      ordenTrabajoAddStore: "sglm.store.ordenTrabajo.OrdenTrabajoStore",
      ordenTrabajoBusquedas: "sglm.store.ordenTrabajo.OrdenTrabajoStore",
      ordenTrabajoEstacionTrabajoStore: "sglm.store.ordenTrabajo.OrdenTrabajoEstacionTrabajoStore",
      ordenTrabajoService: "sglm.service.OrdenTrabajoService",
      loteResumenStore: "sglm.store.ordenTrabajo.LoteResumenStore",
      loteSupervisorStore: "sglm.store.ordenTrabajo.LoteResumenStore",
      /* Solicitud */
      solicitudContext: "sglm.context.SolicitudContext",
      solicitudStore: "sglm.store.solicitud.SolicitudStore",
      solicitudBusquedas: "sglm.store.solicitud.SolicitudStore",
      solicitudService: "sglm.service.SolicitudService",
      solicitudOrdenTrabajoStore:"sglm.store.ordenTrabajo.OrdenTrabajoStore",
      /* Objeto Ensayo*/
      objetoEnsayoStore: "sglm.store.objetoEnsayo.ObjetoEnsayoStore",
      objetoEnsayoMarcaStore: "sglm.store.objetoEnsayo.ObjetoEnsayoStore",
      objetoEnsayoMarcasStore: "sglm.store.objetoEnsayo.ObjetoEnsayoMarcaStore", /* Devuelve marcas agrupadas */
      objetoEnsayoModeloStore: "sglm.store.objetoEnsayo.ObjetoEnsayoStore",
      objetoEnsayoService: "sglm.service.ObjetoEnsayoService",
      //PLANTILLA  CALIBRACION
      plntContext: "sglm.context.PlantillaCalibracionEquipoContext",
      commonService : "sglm.service.CommonService",
      /* Reportes Service */
      reporteService: "sglm.service.ReporteService",
      /* Depositos */
      depositoStore: "sglm.store.deposito.DepositoStore",
      depositoUsuarioStore: "sglm.store.deposito.DepositoUsuarioStore",
      //Historicos
      historicoStore:"sglm.store.historico.HistoricoStore",
      historicosService:"sglm.service.HistoricosService",
      //condiciones_acciones
      condicionesAccionesContext: "sglm.context.CondicionesAccionesContext",
      condicionesAccionesService: "sglm.service.CondicionesAccionesService",
      condicionAccionStore: "sglm.store.condicionesAcciones.CondicionesAccionesStore",
      catalogoCaracteristicas: "sglm.store.condicionesAcciones.CatalogoCaracteristicasStore",
      /* Frase Tipo */
      fraseTipoStore: "sglm.store.condicionesAcciones.FraseTipoStore",
      fraseTipoCondicionAccionStore: "sglm.store.condicionesAcciones.FraseTipoCondicionAccionStore",
      /* Inspeccion Individual Medidor */
      condicionesEncontradasStore: "sglm.store.lista.CondicionesEncontradasStore",
      condicionesAccionesStore: "sglm.store.trabajoEjecutado.medidor.CondicionesAccionesStore",
      /* Trabajos Ejecutados Medidor */
      trabajoEjecutadoMedidorStore: "sglm.store.trabajoEjecutado.medidor.TrabajoEjecutadoMedidorStore",
      condicionAccionTrabajoEjecutadoStore: "sglm.store.trabajoEjecutado.medidor.CondicionAccionTrabajoEjecutadoStore",
      condicionAccionTrabajoEjecutadoContext: "sglm.context.CondicionAccionTrabajoEjecutadoContext",
      trabajoEjecutadoContext: "sglm.context.TrabajoEjecutadoContext",
      /* Gestion Supervision */
      menuValoracionStore: "sglm.store.supervision.MenuValoracionStore",
      supervisionService: "sglm.service.SupervisionService",
      supervisionContext: "sglm.context.SupervisionContext",
      valorarOrdenesTrabajoStore: "sglm.store.ordenTrabajo.OrdenTrabajoStore",

      corrientesEnsayoStore:"sglm.store.dashboardEstacionTrabajo.CorrientesEnsayoStore",
      listaNormaReferencia:"sglm.store.lista.ItemStore",
      listaProcedimiento:"sglm.store.lista.ItemStore",
      /* dynamic grid */
      //dynamicGridStore: "sglm.store.dynamicGrid.DynamicGridStore",
      dynamicGridStore: "sglm.store.archivoCalibracion.ConfiguracionDetalleStore",
      dynamicGridService: "sglm.service.DynamicGridService",
      /* Archivo Calibracion Medidores */
      configuracionCabeceraArchivoCalibracionStore: "sglm.store.archivoCalibracion.ConfiguracionCabeceraStore",
      archivoCalibracionService: "sglm.service.ArchivoCalibracionService",
      archivoCalibracionContext: "sglm.context.ArchivoCalibracionContext",
      configuracionDetalleArchivoCalibracionStore: "sglm.store.archivoCalibracion.ConfiguracionDetalleStore",
      /* Almacenamiento del archivo excel */
      archivoCalibracionStore: "sglm.store.archivoCalibracion.ConfiguracionCabeceraArchivoExcelStore",
      //solicitude medidor nuevo
      solicitudNuevoStore: "sglm.store.solicitud.SolicitudNuevoStore",
      solicitudMedidorContext:"sglm.context.SolicitudMedidorContext",
      solicitudMedidorService:"sglm.service.SolicitudMedidorService",
      controlSolicitudNuevoStore:"sglm.store.solicitud.ControlSolicitudNuevoStore",
      ctrlHistMedNuevosStore:"sglm.store.solicitud.CtrlHistMedNuevosStore",
      /* Solicitud Verificacion Medidores Nuevos */
      verificacionMedidorStore: "sglm.store.solicitud.VerificacionMedidorStore",
      /* Consulta Solicitudes y Objetos de Ensayo */
      consultaSolicitudObjetoEnsayoStore: "sglm.store.supervision.ConsultaSolicitudesObjetosEnsayoStore",

    };
    return config;
  },
  /**
  	* @protected
  	* Runs at the start of the init() method. Override in subclasses if needed.
  */
    beforeInit: function() {
        splashscreen = Ext.getBody().mask('Iniciando la aplicacion...', 'splashscreen');
        splashscreen.addCls('splashscreen');
        Ext.DomHelper.insertFirst(Ext.query('.x-mask-msg')[0], {
            cls: 'x-splash-icon'
        })
    },
    /**
     * @protected
     * Runs at the end of the init() method. Useful to create initial Viewport, start Jasmine tests, etc.
     */
    launch: function(){
        jwtService = Ext.create('sglm.service.JwtService');
        Ext.setGlyphFontFamily('FontAwesome');
        var task = new Ext.util.DelayedTask(function(){
            splashscreen.fadeOut({
                duration: 1000,
                remove: true
            });

            splashscreen.next().fadeOut({
                duration: 1000,
                remove: true,
                listeners: {
                    afteranimate: function(el, startime, eOpts){
                        var token;

                        // Check to see the current value of the localStorage key
                        token = localStorage.getItem("token");
                        var isTokenExpired = token ? jwtService.isTokenExpired(token) : false;
                        Ext.widget(token && !isTokenExpired ? 'app-main' : 'login');
                        // This ternary operator determines the value of the TutorialLoggedIn key.
                        // If TutorialLoggedIn isn't true, we display the login window,
                        // otherwise, we display the main view
                    }
                }
            });

        });

        task.delay(2000);
    }
    /*afterInit: function() {
     Ext.tip.QuickTipManager.init();
     return Ext.create("Phoenix.view.Viewport");
     }*/
});